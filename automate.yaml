name: Deploy on AWS
on:
  push:
    branches:
      - main

# env:
#   AWS_REGION: us-east-1
#   ECR_REPOSITORY: flask_app
#   ECS_SERVICE: flask_app_service
#   ECS_CLUSTER: flask_prod_cluster
#   ECS_TASK_DEFINITION: task-definition.json
#   CONTAINER_NAME: flask_app_container



jobs:
  job1:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11.7
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install -r requirements.txt
      - name: Run Tests with pytest
        run: pytest

  # job2: 
  #   needs: job1
  #   runs-on: ubuntu-latest
  #   environment: production

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Configure AWS
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
  #         aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  #         aws-region: ${{env.AWS_REGION}}
      
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v2

  #     - name: Build,tag and push the image to ECR
  #       id: build-img
  #       env: 
  #         ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
  #         IMAGE_TAG: ${{github.sha}}
        
  #       run: |
  #         # Build a Docker Image
  #         # Push to ECR
  #         # Deploy on ECS

  #         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #         echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
  #     - name: Fill in the Image ID in the ECS Task definition
  #       id: task-def
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: ${{env.ECS_TASK_DEFINITION}}
  #         container-name: ${{env.CONTAINER_NAME}}
  #         image: ${{steps.build-img.outputs.image}}

  #     - name: Deploy on ECS task definition
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #       with:
  #         task-definition: ${{steps.task-def.outputs.task-definition}}
  #         service: ${{env.ECS_SERVICE}}
  #         cluster: ${{env.ECS_CLUSTER}}
  #         wait-for-service-stability: true







